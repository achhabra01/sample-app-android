name: Android CI/CD Demo

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Version code will be the GitHub run number
  VERSION_CODE: ${{ github.run_number }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Show that CI/CD can modify app properties
      - name: Update version code
        run: |
          echo "VERSION_CODE=${{ env.VERSION_CODE }}"
          sed -i "s/versionCode .*/versionCode ${{ env.VERSION_CODE }}/" app/build.gradle.kts

      # Basic code quality check
      - name: Run Lint
        run: ./gradlew lint

      # Build both debug and release APKs
      - name: Build Debug APK
        run: ./gradlew assembleDebug

      - name: Build Release APK
        run: ./gradlew assembleRelease

      # Rename APKs with version info
      - name: Rename APKs
        run: |
          mv app/build/outputs/apk/debug/app-debug.apk app/build/outputs/apk/debug/HelloWorld-v${{ env.VERSION_CODE }}-debug.apk
          # Only rename release if it exists (unsigned APKs might have different names)
          if [ -f app/build/outputs/apk/release/app-release-unsigned.apk ]; then
            mv app/build/outputs/apk/release/app-release-unsigned.apk app/build/outputs/apk/release/HelloWorld-v${{ env.VERSION_CODE }}-release-unsigned.apk
          fi

      # Upload APKs as artifacts
      - name: Upload Debug APK
        uses: actions/upload-artifact@v4
        with:
          name: debug-apk-v${{ env.VERSION_CODE }}
          path: app/build/outputs/apk/debug/*.apk

      - name: Upload Release APK
        uses: actions/upload-artifact@v4
        with:
          name: release-apk-v${{ env.VERSION_CODE }}
          path: app/build/outputs/apk/release/*.apk

      # Create a simple release (only on main branch pushes)
      - name: Create GitHub Release
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.VERSION_CODE }}
          name: Release Build ${{ env.VERSION_CODE }}
          body: |
            Automated release from CI/CD pipeline
            
            Build: #${{ env.VERSION_CODE }}
            Commit: ${{ github.sha }}
            
            ðŸ“± This is a demo release for learning CI/CD!
          files: |
            app/build/outputs/apk/debug/*.apk
            app/build/outputs/apk/release/*.apk
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Fun addition: Post build info as PR comment
      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'âœ… Build #${{ env.VERSION_CODE }} completed successfully!\n\nðŸ“± APKs are available as artifacts in the [Actions tab](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})'
            })